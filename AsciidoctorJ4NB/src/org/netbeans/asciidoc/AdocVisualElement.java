package org.netbeans.asciidoc;

import java.io.File;
import java.util.HashMap;
import javax.swing.Action;
import javax.swing.JComponent;
import javax.swing.JPanel;
import javax.swing.JToolBar;
import org.asciidoctor.Asciidoctor;
import static org.asciidoctor.Asciidoctor.Factory.create;
import org.netbeans.core.spi.multiview.CloseOperationState;
import org.netbeans.core.spi.multiview.MultiViewElement;
import org.netbeans.core.spi.multiview.MultiViewElementCallback;
import org.openide.awt.UndoRedo;
import org.openide.filesystems.FileUtil;
import org.openide.util.Lookup;
import org.openide.util.NbBundle.Messages;
import org.openide.windows.TopComponent;

@MultiViewElement.Registration(
        displayName = "#LBL_Adoc_VISUAL",
        iconBase = "org/netbeans/asciidoc/icon.png",
        mimeType = "text/x-adoc",
        persistenceType = TopComponent.PERSISTENCE_NEVER,
        preferredID = "AdocVisual",
        position = 2000
)
@Messages("LBL_Adoc_VISUAL=Visual")
public final class AdocVisualElement extends JPanel implements MultiViewElement {

    private AdocDataObject obj;
    private JToolBar toolbar = new JToolBar();
    private transient MultiViewElementCallback callback;

    public AdocVisualElement(Lookup lkp) {
        obj = lkp.lookup(AdocDataObject.class);
        assert obj != null;
        initComponents();

        //Convert file to html and add to editorpane:
        //http://asciidoctor.org/docs/asciidoctorj/
        //https://github.com/asciidoctor/asciidoctorj/issues/102%3Ebut
        //https://github.com/asciidoctor/asciidoctorj#converting-documents
        //org.jruby.exceptions.RaiseException: (LoadError) no such file to load -- asciidoctor
        //http://discuss.asciidoctor.org/AsciidoctorJ-error-when-using-in-a-OSGi-bundle-td1910.html
        File file = FileUtil.toFile(obj.getPrimaryFile());
//        Asciidoctor asciidoctor = create(ClassLoader.getSystemClassLoader());
        Asciidoctor ascii = create(ClassLoader.getSystemClassLoader());
//        Asciidoctor ascii = Asciidoctor.Factory.create(ClassLoader.getSystemClassLoader()); 
//        ascii = Asciidoctor.Factory.create(AdocVisualElement.class.getClassLoader()); 
        String html = ascii.convertFile(file, new HashMap<String, Object>());
//        String html = ascii.convert(
//                "Writing AsciiDoc is _easy_!",
//                new HashMap<String, Object>());
        htmlEditorPane.setText(html);
        

    }

    @Override
    public String getName() {
        return "AdocVisualElement";
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        htmlEditorPane = new javax.swing.JEditorPane();

        htmlEditorPane.setContentType("text/html"); // NOI18N
        jScrollPane1.setViewportView(htmlEditorPane);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JEditorPane htmlEditorPane;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
    @Override
    public JComponent getVisualRepresentation() {
        return this;
    }

    @Override
    public JComponent getToolbarRepresentation() {
        return toolbar;
    }

    @Override
    public Action[] getActions() {
        return new Action[0];
    }

    @Override
    public Lookup getLookup() {
        return obj.getLookup();
    }

    @Override
    public void componentOpened() {
    }

    @Override
    public void componentClosed() {
    }

    @Override
    public void componentShowing() {
    }

    @Override
    public void componentHidden() {
    }

    @Override
    public void componentActivated() {
    }

    @Override
    public void componentDeactivated() {
    }

    @Override
    public UndoRedo getUndoRedo() {
        return UndoRedo.NONE;
    }

    @Override
    public void setMultiViewCallback(MultiViewElementCallback callback) {
        this.callback = callback;
    }

    @Override
    public CloseOperationState canCloseElement() {
        return CloseOperationState.STATE_OK;
    }

}
